package org.wahlzeit.model;

import java.util.HashMap;

import static org.wahlzeit.utils.AssertionUtil.assertValidDouble;

/*
@PatternInstance(
    patternName = "ValueObject"
    participants = {
        "ValueObject"
    }
)
*/
public class CartesianCoordinate extends AbstractCoordinate{
    private static final HashMap<CartesianCoordinate, CartesianCoordinate> allCartesianCoordinates = new HashMap<>();

    // Distances form earth center in kilometer
    private final double x;
    private final double y;
    private final double z;

    /**
     * Creating a new CartesianCoordinate from x, y and z
     * @param x: Distance on x-axis in kilometer
     * @param y: Distance on y-axis in kilometer
     * @param z: Distance on z-axis in kilometer
     */
    private CartesianCoordinate(double x, double y, double z){
        assertValidDouble(x);
        assertValidDouble(y);
        assertValidDouble(z);
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public static CartesianCoordinate createCartesianCoordinate(double x, double y, double z) {
        CartesianCoordinate newCoordinate = new CartesianCoordinate(x, y, z);
        if(allCartesianCoordinates.containsValue(newCoordinate)){
            return allCartesianCoordinates.get(newCoordinate);
        }
        allCartesianCoordinates.put(newCoordinate, newCoordinate);
        return newCoordinate;
    }

    @Override
    public CartesianCoordinate asCartesianCoordinate() {
        return this;
    }

    @Override
    public SphericCoordinate asSphericCoordinate() {
        // Calculate latitude and longitude according to https://en.wikipedia.org/wiki/Spherical_coordinate_system#Cartesian_coordinates
        double radius = Math.sqrt(x*x + y*y + z*z);
        double latitude = Math.toDegrees(Math.atan2(z, Math.sqrt(x*x + y*y)));
        double longitude = Math.toDegrees(Math.atan2(y, x));

        return SphericCoordinate.createSphericCoordinate(latitude, longitude, radius);
    }


    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }

    public double getZ() {
        return z;
    }

    @Override
    public boolean equals(Object o) {
        // generated by idea
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        CartesianCoordinate that = (CartesianCoordinate) o;

        if (Double.compare(that.x, x) != 0) return false;
        if (Double.compare(that.y, y) != 0) return false;
        return Double.compare(that.z, z) == 0;
    }

    @Override
    public int hashCode() {
        // generated by idea
        int result;
        long temp;
        temp = Double.doubleToLongBits(x);
        result = (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(y);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(z);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
}
